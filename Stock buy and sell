You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

Constraints:
1 <= prices.length <= 105
0 <= prices[i] <= 104

APPROACH
Initialize:
min_price is set to INT_MAX (a very large value).
max_profit is set to 0.
Iterate through prices:
Update min_price to track the lowest price seen so far.
Compute the potential profit if selling at the current price (price - min_price).
Update max_profit if the new profit is greater than the current max_profit.
Return max_profit, which stores the maximum possible profit.

Complexity Analysis
Time Complexity: 𝑂(𝑛)
O(n) (since we traverse the array once).
Space Complexity: 𝑂(1)
O(1) (only two variables used).

//code//

#include <bits/stdc++.h>
using namespace std;


int maxProfit(vector<int>& prices) {
    int min_price = INT_MAX; // Initialize minimum price as a large value
    int max_profit = 0; // Initialize maximum profit as 0

    for (int price : prices) {
        min_price = min(min_price, price); // Update the minimum price encountered
        max_profit = max(max_profit, price - min_price); // Calculate and update max profit
    }

    return max_profit;
}
int main() {
    vector<int> prices = {7,1,5,3,6,4}; // Example input
    cout << "Max Profit: " << maxProfit(prices) << endl;
    return 0;
}
